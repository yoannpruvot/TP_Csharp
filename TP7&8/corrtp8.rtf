{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 using System;\
using System.Threading.Tasks;\
using System.Diagnostics;\
\
namespace MonteCarlo\
\{\
	public class MonteCarlo\
	\{\
		IGenerateur gen;\
\
		public MonteCarlo()\
		\{\
			gen = new Gunif();\
		\}\
\
		public MonteCarlo(IGenerateur gen)\{\
			this.gen = gen;\
		\}\
\
		public Tuple<double,double> MoyVarEmpi(Func<double,double> f, ulong n)\{\
			double m = 0, v = 0;\
			double aux;\
			for (ulong i = 0; i < n; i++)\
			\{\
				aux = f(gen.NextDouble());\
				m += aux;\
				v += aux * aux;\
			\}\
			m = m / n;\
			v = (v / n - m * m) / n;\
			return new Tuple<double, double>(m, v);\
		\}\
	\}\
\
	public interface IGenerateur\{\
		double NextDouble();\
		IGenerateur Clone();\
	\}\
\
	public class Gunif : Random, IGenerateur\{\
		static Random g = new Random();\
\
		public Gunif(int gr) : base(gr)\{\}\
\
		public Gunif() \{ \}\
\
		public IGenerateur Clone()\{\
			return new Gunif(g.Next());\
		\}\
	\}\
\
\
	public class MonteCarloP\
	\{\
		MonteCarlo[] tmc;\
		Task<Tuple<double, double>>[] t;\
\
		public MonteCarloP(IGenerateur gen, int p)\{\
			tmc = new MonteCarlo[p];\
			tmc[0] = new MonteCarlo(gen);\
			for (int i = 1; i < p;i++)\{\
				tmc[i] = new MonteCarlo(gen.Clone());\
			\}\
			t = new Task<Tuple<double, double>>[tmc.Length];\
		\}\
\
		public Tuple<double, double> MoyVarEmpi(Func<double, double> f, ulong n)\
		\{\
			\
			for (int i = 0; i < tmc.Length; i++)\
			\{\
				int k = i;\
				t[i] = Task.Factory.StartNew(() => tmc[k].MoyVarEmpi(f, n / (uint)tmc.Length));\
			\}\
			Task.WaitAll(t);\
			double moy = 0, var=0;\
			for (int i = 0; i < t.Length; i++)\
			\{\
				moy += t[i].Result.Item1;\
				var +=  (n/(uint)tmc.Length)*t[i].Result.Item2 + t[i].Result.Item1*t[i].Result.Item1;\
			\}\
			moy = moy / tmc.Length;\
			var = (var / tmc.Length - moy*moy)/n;\
			return new Tuple<double, double>(moy, var);\
		\}\
	\}\
\}\
\
\
public class RGauss : Random, IGenerateur\
	\{\
		static Random g = new Random();\
		double m, s;\
		double x, y;\
		int flag;\
\
		public RGauss(double m, double v) : base(g.Next())\
		\{\
			this.m = m;\
			this.s = Math.Sqrt(v);\
			flag = 3;\
		\}\
\
		public IGenerateur Clone()\{\
			return new RGauss(m, s * s);\
		\}\
\
\
		public RGauss() : base(g.Next())\
		\{\
			this.m = 0;\
			this.s = 1;\
			flag = 3;\
		\}\
\
		protected override double Sample()\
		\{\
			switch (flag)\
			\{\
				case 1: flag++; return x;\
				case 2: flag++; return y;\
				default: Calcul(); return Sample();\
			\}\
		\}\
\
		void Calcul()\
		\{\
			double r = Math.Sqrt(-2 * Math.Log(1 - base.Sample())) * s;\
			double theta = 2 * Math.PI * base.Sample();\
			x = r * Math.Cos(theta) + m;\
			y = r * Math.Sin(theta) + m;\
			flag = 1;\
		\}\
	\}}